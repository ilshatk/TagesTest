package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"time"

	pb "grpcClientTages/pbs" // –ò–º–ø–æ—Ä—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
	conn, err := grpc.NewClient("localhost:50051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("Failed to connect: %v", err)
	}
	defer conn.Close()

	client := pb.NewFileServiceClient(conn)

	if len(os.Args) < 2 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
		fmt.Println("  go run client.go upload <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>   - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
		fmt.Println("  go run client.go list                    - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
		fmt.Println("  go run client.go download <–∏–º—è_—Ñ–∞–π–ª–∞>    - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
		return
	}

	command := os.Args[1]

	switch command {
	case "upload":
		if len(os.Args) < 3 {
			fmt.Println("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
			return
		}
		uploadFile(client, os.Args[2])
	case "list":
		listFiles(client)
	case "download":
		if len(os.Args) < 3 {
			fmt.Println("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
			return
		}
		downloadFile(client, os.Args[2])
	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command)
	}
}

func uploadFile(client pb.FileServiceClient, filePath string) {
	fmt.Printf("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: %s\n", filePath)

	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %v", err)
	}
	defer file.Close()

	// –°–æ–∑–¥–∞–µ–º stream –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	stream, err := client.UploadFile(context.Background())
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å stream: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
	filename := filepath.Base(filePath)
	err = stream.Send(&pb.UploadRequest{
		Data: &pb.UploadRequest_Filename{
			Filename: filename,
		},
	})
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–∞—Å—Ç—è–º–∏
	buffer := make([]byte, 64*1024) // 64KB chunks
	for {
		n, err := file.Read(buffer)
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		}

		err = stream.Send(&pb.UploadRequest{
			Data: &pb.UploadRequest_Chunk{
				Chunk: buffer[:n],
			},
		})
		if err != nil {
			log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chunk: %v", err)
		}
		fmt.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç\n", n)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
	response, err := stream.CloseAndRecv()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	fmt.Printf("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n")
	fmt.Printf("   –ò–º—è: %s\n", response.Filename)
	fmt.Printf("   –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", response.Size)
}

func listFiles(client pb.FileServiceClient) {
	fmt.Println("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")

	response, err := client.ListFiles(context.Background(), &pb.ListRequest{})
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: %v", err)
	}

	if len(response.Files) == 0 {
		fmt.Println("üìÅ –§–∞–π–ª–æ–≤ –Ω–µ—Ç")
		return
	}

	fmt.Println("\nüìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:")
	fmt.Println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
	fmt.Printf("%-30s %-20s %-20s\n", "–ò–º—è —Ñ–∞–π–ª–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
	fmt.Println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

	for _, file := range response.Files {
		// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		createdAt, _ := time.Parse(time.RFC3339, file.CreatedAt)
		updatedAt, _ := time.Parse(time.RFC3339, file.UpdatedAt)

		fmt.Printf("%-30s %-20s %-20s\n",
			file.Filename,
			createdAt.Format("2006-01-02 15:04:05"),
			updatedAt.Format("2006-01-02 15:04:05"))
	}
	fmt.Printf("\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(response.Files))
}

func downloadFile(client pb.FileServiceClient, filename string) {
	fmt.Printf("–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª: %s\n", filename)

	// –°–æ–∑–¥–∞–µ–º stream –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	stream, err := client.DownloadFile(context.Background(), &pb.DownloadRequest{
		Filename: filename,
	})
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å stream –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
	outputPath := "downloaded_" + filename
	outputFile, err := os.Create(outputPath)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: %v", err)
	}
	defer outputFile.Close()

	var totalBytes int64 = 0

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–∞—Å—Ç—è–º–∏
	for {
		response, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chunk: %v", err)
		}

		n, err := outputFile.Write(response.Chunk)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: %v", err)
		}

		totalBytes += int64(n)
		fmt.Printf("–ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç\n", n)
	}

	fmt.Printf("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!\n")
	fmt.Printf("   –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: %s\n", outputPath)
	fmt.Printf("   –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", totalBytes)
}
